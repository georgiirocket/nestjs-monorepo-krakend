services:
  #Auth service (api)
  auth:
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: production
    profiles: [ 'prod' ]
    restart: unless-stopped
    env_file:
      - ./.env.production
    depends_on:
      migration:
        condition: service_completed_successfully

  #Post (api)
  post:
    build:
      context: .
      dockerfile: ./apps/post/Dockerfile
      target: production
    profiles: [ 'prod' ]
    restart: unless-stopped
    env_file:
      - ./.env.production
    depends_on:
      migration:
        condition: service_completed_successfully

  #User (api)
  user:
    build:
      context: .
      dockerfile: ./apps/user/Dockerfile
      target: production
    profiles: [ 'prod' ]
    restart: unless-stopped
    env_file:
      - ./.env.production
    depends_on:
      migration:
        condition: service_completed_successfully

  #File service (api)
  file:
    build:
      context: .
      dockerfile: ./apps/file/Dockerfile
      target: production
    profiles: [ 'prod' ]
    restart: unless-stopped
    env_file:
      - ./.env.production
    volumes:
      - file-storage:/app/storage
    depends_on:
      migration:
        condition: service_completed_successfully

  #Migration prisma
  migration:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: production
    profiles: [ 'prod' ]
    env_file:
      - ./.env.production
    depends_on:
      postgresql-prod:
        condition: service_healthy


  #Prod database
  postgresql-prod:
    image: 'bitnami/postgresql:latest'
    profiles: ['prod']
    restart: unless-stopped
    volumes:
      - 'postgresql-prod:/bitnami/postgresql'
    env_file:
      - ./.env.production
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRESQL_USERNAME}" ]
      interval: 5s
      timeout: 10s
      retries: 5

  #Nginx proxy
  nginx-prod:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    restart: unless-stopped
    env_file:
      - ./.env.production
    profiles: [ 'prod' ]
    ports:
      - "3000:80"
    depends_on:
      - auth
      - user
      - file
      - post

  #--Development--#
  #Dev database
  postgresql-dev:
    image: 'bitnami/postgresql:latest'
    profiles: [ 'dev' ]
    restart: unless-stopped
    ports:
      - '5432:5432'
    volumes:
      - 'postgresql-dev:/bitnami/postgresql'
    env_file:
      - ./.env

  #Nginx proxy
  nginx-dev:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    restart: unless-stopped
    env_file:
      - ./.env
    profiles: [ 'dev' ]
    ports:
      - "3000:80"

volumes:
  postgresql-dev:
  postgresql-prod:
  file-storage:
